Test date: 07/14/16  20:45:57 
The number of times you used the grading program is 10 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
ARM Grading System Version 4.1
Student: Last=Marks                First=Collin               Type=Individual          
Grading program history
   *** Grading Run.  Date: 07/14/16  19:26:40 
   ************************************************** 
   *** Program works correctly.                       
   *** Additional runs are to improve efficiency.     
   *** Completion -- Date: 07/14/16  19:29:38                     
   ************************************************** 
   *** Grading Run.  Date: 07/14/16  19:29:40 
   *** Grading Run.  Date: 07/14/16  19:34:02 
   *** Grading Run.  Date: 07/14/16  19:34:41 
   *** Grading Run.  Date: 07/14/16  19:36:27 
   *** Grading Run.  Date: 07/14/16  19:43:25 
   *** Grading Run.  Date: 07/14/16  20:13:43 
   *** Grading Run.  Date: 07/14/16  20:24:59 
   *** Grading Run.  Date: 07/14/16  20:26:46 
   *** Grading Run.  Date: 07/14/16  20:45:57 
Comparing your program's key.out to the expected output
Test ran correctly.
++ Grade ++   60 = Points earned for correct answers.

-> A major reason for programming in assembler is to maximize efficiency.
This can be instructions written and/or instructions executed.
Please read the section in the class notes titled Code Complexity.

We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
20 points for   0 -  38  
15 points for  39 -  42  
10 points for  43 -  46 
05 points for  47 -  50 
00 points for  51+      
Your actual counts are:
Lines ....... 148    Comments ...  82    Labels .......   8   
Directives ..   9    Variables ..   7    Executables ..  42    McCabe ..   6 
++ Grade ++   15 = Points earned for code written efficiency.  

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0022 The program header format is adequate. 
DOCHB-1.18 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++   95 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
     1  = Number of grading runs to get the program working.     
     9  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC7;&k~C6&juiC86&zuzC?;&Zkyz&jgzk@&6=57:57<&&86@:;@;=&

Building the file arm.ans for electronic submission...
