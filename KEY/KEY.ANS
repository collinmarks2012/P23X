Test date: 06/08/16  20:18:25 
The number of times you used the grading program is 1 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Key Grading System Version 4.1
Student: Last=Marks                First=Collin               Type=Individual          
Grading and testing history log
       User Test.    Date: 06/04/16  22:40:51  keyboard     test         
       User Test.    Date: 06/04/16  22:42:37  keyboard     test         
       User Test.    Date: 06/08/16  17:45:35  keyboard     test         
       User Test.    Date: 06/08/16  17:47:12  nt           test         
       User Test.    Date: 06/08/16  20:11:05  nt           test         
   *** Grading Run.  Date: 06/08/16  20:18:25 
Running test
Test ran correctly.
++ Grade ++   60 = Points earned for correct answers.

-> A major reason for programming in assembler is to maximize efficiency.
This can be instructions written and/or instructions executed.
Please read the section in the class notes titled Code Complexity.

We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
20 points for   0 -  20  
15 points for  21 -  22  
10 points for  23 -  24 
05 points for  25 -  26 
00 points for  27+      
Your actual counts are:
Lines .......  72    Comments ...  37    Labels .......   3   
Directives ..   6    Variables ..   7    Executables ..  19    McCabe ..   3 
++ Grade ++   20 = Points earned for code written efficiency.  

The McCabe number for your KEY.ASM is 3 which is considered 
fine for the KEY assignment and indicates reasonable program structure.

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0020 The program header format is adequate. 
DOCHB-0.58 Use of code block headers is adequate. 
DOCLC-0.95 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
     5  = Number of user tests.                                  
     1  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC86&k~C6&juiC86&zuzC766&Zkyz&jgzk@&6<56>57<&&86@7>@8;&

Building the file key.ans for electronic submission...
;--------------------------------------------------------------------
;	program: 	KEY
;
;	function: 	KEY reads printable characters from the Standard Input
;				The characters are processed one at a time as they are read
;				If the character is an upper case letter (A-Z) then write 
;				it to the standard output (ah=02h, dl=char, int 21h).
;				If the character is a lower case letter (a-z) then convert
;				it to upper case and write it to the standard output.
;				You can perform this conversion by subtracting 20h 
;				from the lower case letter.
;				If the character is a blank (20h) or period (2Eh) then 
;				write it to the standard output.
;				If the character is anything else then do not write it 
; 				to the standard output, just throw the character away.
;
;	owner: 		Collin Marks
;
;	date: 		06/04/2016
;---------------------------------------
    .model     small 				; 64k code and 64k data
	.8086 							; only allow 8086 instructions
	.stack 256 						; reserve 256 bytes for the stack
;---------------------------------------
	.data 							; start the data segment
;---------------------------------------
; Declaration of the variable trans
;---------------------------------------
	tran db 32 dup('*')					; the 32 characters below space
		 db ' '							; the space character
		 db 32 dup('*')					; the 32 character b/w space and 'A'
		 db 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'	; A-Z in upper case
		 db 6 dup('*')					; the 6 characters b/w 'Z' and 'a'
		 db 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'	; A-Z in upper case
		 db 133 dup('*')				; the remaining characters
;---------------------------------------
	.code 							;start the code segment
;---------------------------------------
; start the program
;---------------------------------------
start:
	mov ax,@data 					;establish addressability to the
	mov ds,ax 						;data segment for this program
;---------------------------------------
; While loop will continue to run until a period is inputted
;---------------------------------------
	whileP:
		mov bx, offset tran 	; bx will point to the 'morphed' ASCii table
		mov ah, 8 				; code to read from DOS
		int 21h					; read a char
								; if a period is present end the program
		cmp al, 46				; check to see if period is inputted
		je endProgram			; if period is present end the program
		xlat				; translate the char to 'morphed' table
		cmp al, 42				; check to see if a special character 
								; was inputted
		je whileP				; ignore that special character
		mov ah, 2				; code to write the char
		mov dl, al				; move the char to dl
		int 21h					; write the character
		jmp whileP				; continue through the loop
	
;---------------------------------------
; Will effectively end the program
;---------------------------------------
	endProgram:
		mov ah, 2			; code to write last char
		mov dl, '.'			; write a period to dl register
		int 21h				; write the period char
		mov ax, 4c00h		; close program process 
		int 21h
		end start